import { useAuth } from '@clerk/nextjs';
import { useMutation } from '@tanstack/react-query';

// Generated by Copilot
const SERVER_URL =
  process.env.NEXT_PUBLIC_SERVER_URL || 'http://localhost:8000';

interface AIAnalysis {
  data: {
    mood: string;
    summary: string;
    reason: string;
  };
}

interface AnalyzeJournalRequest {
  text: string;
}

interface SaveJournalRequest {
  text: string;
  mood: string;
  summary: string;
  reason: string;
}

interface PDFExtractResponse {
  text: string;
}

// Hook for analyzing journal with AI
export function useAnalyzeJournal() {
  const { getToken } = useAuth();

  return useMutation<AIAnalysis, Error, AnalyzeJournalRequest>({
    mutationFn: async ({ text }: AnalyzeJournalRequest) => {
      const token = await getToken();

      const response = await fetch(`${SERVER_URL}/api/analyze-journal`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ text }),
      });

      if (!response.ok) {
        throw new Error('Failed to analyze journal');
      }

      return response.json();
    },
  });
}

// Hook for saving journal
export function useSaveJournal() {
  const { getToken } = useAuth();

  return useMutation<void, Error, SaveJournalRequest>({
    mutationFn: async ({ text, mood, summary, reason }: SaveJournalRequest) => {
      const token = await getToken();

      const response = await fetch(`${SERVER_URL}/api/save-journal`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          text,
          mood,
          summary,
          reason,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to save journal');
      }
    },
  });
}

// Hook for PDF text extraction
export function usePDFExtract() {
  const { getToken } = useAuth();

  return useMutation<PDFExtractResponse, Error, File>({
    mutationFn: async (file: File) => {
      const token = await getToken();
      const formData = new FormData();
      formData.append('pdf', file);

      const response = await fetch(`${SERVER_URL}/api/pdf-extract`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to extract PDF text');
      }

      return response.json();
    },
  });
}
